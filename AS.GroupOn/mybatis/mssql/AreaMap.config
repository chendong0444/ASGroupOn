<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="AreaMap" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Area" type="AS.GroupOn.Domain.Spi.Area,AS.GroupOn" />
    <typeAlias alias="AreaFilter" type="AS.GroupOn.DataAccess.Filters.AreaFilter,AS.GroupOn" />
  </alias>
  <cacheModels>
    <cacheModel id="c" implementation="MEMORY" readOnly="true">
      <flushInterval  seconds="3" />
      <flushOnExecute statement="insert"/>
      <flushOnExecute statement="update"/>
      <flushOnExecute statement="delete"/>
      <property name="CacheSize" value="10000" />
    </cacheModel>
  </cacheModels>
  <statements>
    <insert id="insert" parameterClass="Area" >
      insert into Area
      (areaname,cityid,sort,ename,display,type,circle_id)
      values
      (#areaname#,#cityid#,#sort#,#ename#,#display#,#type#,#circle_id#)
    </insert>
    <update id="update" parameterClass="Area">
      update [Area] set
      areaname=#areaname#,cityid=#cityid#,sort=#sort#,ename=#ename#,display=#display#,type=#type#,circle_id=#circle_id#
      where id=#id#
    </update>
    <delete id="delete" parameterClass="System.String">
      delete from [Area] where id=#value#
    </delete>
    <sql id="selectsql">
      select * from [Area]
    </sql>
    <sql id="wheresql">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="id">
          id=#id#
        </isNotNull>
        <isNotNull prepend="and" property="cityid">
          cityid=#cityid#
        </isNotNull>
		  <isNotNull prepend="or" property="or_in_circle_pid">
			  cityid in (select id from Category where City_pid=#or_in_circle_pid#) 
		  </isNotNull>
        <isNotNull prepend="and" property="areaname">
          areaname=#areaname#
        </isNotNull>
        <isNotNull prepend="and" property="display">
          display=#display#
        </isNotNull>
        <isNotNull prepend="and" property="circle_id">
          circle_id=#circle_id#
        </isNotNull>
        <isNotNull prepend="and" property="ename">
          ename=#ename#
        </isNotNull>
        <isNotNull prepend="and" property="type">
          type=#type#
        </isNotNull>
      </dynamic>
    </sql>
    <select id="getbyid" parameterClass="System.Int32" resultClass="Area" cacheModel="c">
      <include refid="selectsql" />
      where id=#value#
    </select>
    <select id="gettop1byfilter" parameterClass="AreaFilter" resultClass="Area" cacheModel="c">
      select top 1
      * from [Area]
      <include refid="wheresql"/>
      <isNotEmpty property="SortOrderString">
        order by $SortOrderString$
      </isNotEmpty>
    </select>
    <select id="getbyfilter" parameterClass="AreaFilter" resultClass="Area" cacheModel="c">
      select
      <isNotNull property="Top">
        top $Top$
      </isNotNull>
      * from [Area]
      <include refid="wheresql"/>
      <isNotEmpty property="SortOrderString">
        order by $SortOrderString$
      </isNotEmpty>
    </select>
    <select id="getcount" parameterClass="AreaFilter" resultClass="System.Int32" cacheModel="c">
      select count(*) from [Area]
      <include refid="wheresql"/>
    </select>
    <select id="getbypage" resultClass="Area" parameterClass="AreaFilter" cacheModel="c">
      WITH datatable AS
      (
      SELECT *,
      ROW_NUMBER() OVER (ORDER BY $SortOrderString$) AS 'RowNumber'
      FROM [Area]
      <include refid="wheresql"/>
      )
      SELECT *
      FROM datatable
      WHERE RowNumber BETWEEN #StartRow# AND #EndRow#;
    </select>
  </statements>
</sqlMap>