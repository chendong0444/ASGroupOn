<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Vote_FeedbackMap" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Vote_Feedback" type="AS.GroupOn.Domain.Spi.Vote_Feedback,AS.GroupOn" />
    <typeAlias alias="Vote_FeedbackFilters" type="AS.GroupOn.DataAccess.Filters.Vote_FeedbackFilters,AS.GroupOn" />
  </alias>
  <cacheModels>
    <cacheModel id="c" implementation="MEMORY" readOnly="true">
      <flushInterval  seconds="3" />
      <flushOnExecute statement="insert"/>
      <flushOnExecute statement="update"/>
      <flushOnExecute statement="delete"/>
      <property name="CacheSize" value="10000" />
    </cacheModel>
  </cacheModels>
  <statements>
    <insert id="insert" parameterClass="Vote_Feedback" >
      insert into [vote_feedback]
      (Username,User_id,Ip,Addtime) values
      (#Username#,#User_id#,#Ip#,#Addtime#)
      <selectKey type="post" resultClass="System.Int32" property="id">
        select @@identity as value
      </selectKey>
    </insert>
    <update id="update" parameterClass="Vote_Feedback">
      update [vote_feedback] set
      Username=#Username#,User_id=#User_id#,Ip=#Ip#,Addtime=#Addtime#)
      where id=#id#
    </update>
    <delete id="delete" parameterClass="System.Int32">
      delete from [vote_feedback] where id=#id#
    </delete>
    <sql id="selectsql">
      select * from [vote_feedback]
    </sql>
    <sql id="wheresql">
      <dynamic prepend="where">
       <isNotNull prepend="and" property="User_ID">
          User_id=#User_ID#
        </isNotNull>
        <isNotNull prepend="and" property="Username">
          Username=#Username#
        </isNotNull>
        <isNotNull prepend="and" property="IP">
          Ip=#IP#
        </isNotNull>
        <isNotNull prepend="and" property="Fromadd_time">
          <![CDATA[
          Addtime>=#Fromadd_time#
          ]]>
        </isNotNull>
        <isNotNull prepend="and" property="Toadd_time">
          <![CDATA[
          Addtime<=#Toadd_time#
          ]]>
        </isNotNull>
      </dynamic>
    </sql>
    <select id="getbyid" parameterClass="System.Int32" resultClass="Vote_Feedback" cacheModel="c">
      <include refid="selectsql" />
      where id=#id#
    </select>
    <select id="gettop1byfilter" parameterClass="Vote_FeedbackFilters" resultClass="Vote_Feedback" cacheModel="c">
      select top 1
      * from [vote_feedback]
      <include refid="wheresql"/>
      <isNotEmpty property="SortOrderString">
        order by $SortOrderString$
      </isNotEmpty>
    </select>
    <select id="getbyfilter" parameterClass="Vote_FeedbackFilters" resultClass="Vote_Feedback" cacheModel="c">
      select
      <isNotNull property="Top">
        top $Top$
      </isNotNull>
      * from [vote_feedback]
      <include refid="wheresql"/>
      <isNotEmpty property="SortOrderString">
        order by $SortOrderString$
      </isNotEmpty>
    </select>
    <select id="getcount" parameterClass="Vote_FeedbackFilters" resultClass="System.Int32" cacheModel="c">
      select count(*) from [vote_feedback]
      <include refid="wheresql"/>
    </select>
    <select id="getbypage" resultClass="Vote_Feedback" parameterClass="Vote_FeedbackFilters" cacheModel="c">
      WITH datatable AS
      (
      SELECT *,
      ROW_NUMBER() OVER (ORDER BY $SortOrderString$) AS 'RowNumber'
      FROM [vote_feedback]
      <include refid="wheresql"/>
      )
      SELECT *
      FROM datatable
      WHERE RowNumber BETWEEN #StartRow# AND #EndRow#;
    </select>
  </statements>
</sqlMap>